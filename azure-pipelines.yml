trigger:
- cicd

parameters:
  - name: User
stages:
- stage: Build
  jobs:
  - job: BuildJob
    displayName: 'Build Stage'
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: Ant@1
      displayName: 'Ant build.xml'
      inputs:
        buildFile: '$(Parameters.antBuildFile)'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

- stage: Publish
  jobs:
  - job: PublishJob
    displayName: 'Publish Stage'
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: UniversalPackages@0
      displayName: 'Universal publish'
      inputs:
        command: publish
        vstsFeed: 'deddc8e4-2978-46b5-bce1-12f4becb2a11/c0493aac-8cda-4ba2-ae10-46ed3a1d986f'
        vstsFeedPublish: 'deddc8e4-2978-46b5-bce1-12f4becb2a11/c0493aac-8cda-4ba2-ae10-46ed3a1d986f'
        vstsFeedPackagePublish: csv

    - task: DownloadPackage@1
      displayName: 'Download Package c3f254fa-dbfc-4892-9fab-f162749333f7'
      inputs:
        packageType: upack
        feed: 'deddc8e4-2978-46b5-bce1-12f4becb2a11/c0493aac-8cda-4ba2-ae10-46ed3a1d986f'
        view: 'a7e6578b-4e33-47a1-b596-37540a4bb1c9'
        definition: 'c3f254fa-dbfc-4892-9fab-f162749333f7'
        version: '*'

- stage: Workitem
  jobs:
    - job: createTask
      displayName: Create Workitem
      steps:
          - template: workitem.yml
            parameters:
             AssignedToUser: $(User)

- stage: state
  
  jobs:
    -  job: getstate 
       displayName: get state of work item
       steps:
        - task: Delay@1
          inputs:
           delayForMinutes: '5'
        - task: CmdLine@2
          displayName: Install Azure DevOps Extension
          inputs:
           script: 'az extension add --name azure-devops'
        - task: CmdLine@2
          displayName: Configure Default Settings
          inputs:
           script: |
       
            az devops configure --defaults organization=$(System.CollectionUri) project=$(System.TeamProject)
        - task: CmdLine@2
          displayName: Get Work Item Status
          inputs:
           script: |
                # Run the Azure DevOps CLI query and store the output in a variable
                result=$(az boards query --wiql "SELECT [System.State] FROM workitems WHERE [System.Title] = 'Build$(Build.BuildNumber)'" --output json)
    
                # Extract the desired information from the JSON output (modify as needed)
                workItemState=$(echo $result | jq -r '.[0].fields["System.State"]')
    
                # Set the variable
                echo "##vso[task.setvariable variable=workItemState]$workItemState"
          env:
            AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
